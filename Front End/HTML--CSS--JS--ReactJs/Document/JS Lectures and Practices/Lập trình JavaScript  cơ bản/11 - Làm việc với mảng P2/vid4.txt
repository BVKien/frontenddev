+ Ví dụ: Array reduce() method

- Ví dụ: Array reduce() method

- console.log(i, total); - console.log có thể log đc rất nhiều thứ khác nhau dù 1 dòng

var courses = [
  {
    id: 1,
    name: "JavaScript",
    coin: 250,
  },
  {
    id: 2,
    name: "Python",
    coin: 200,
  },
  {
    id: 3,
    name: "C#",
    coin: 150,
  },
  {
    id: 4,
    name: "ReactJs",
    coin: 0,
  },
  {
    id: 5,
    name: "Ruby",
    coin: 0,
  },
  {
    id: 6,
    name: "C#",
    coin: 0,
  },
];

- khi có initial value
- lần đầu tiên reudce được gọi lại = giá trị khởi tạo là = 0
var i = 0;
var totalCoins = courses.reduce(function (total, course) {
  i++;

  //console.log(i, total);

  return total + course.coin;
}, 0); - initial value -> không bắt buộc - tuy nhiên ảnh hưởng đến việc reduce chạy thế nào
//console.log(totalCoins);

- khi không có initial value
- lần đầu tiên nó trả về 1 object javascript id = 1
- tức là nó lấy phần tử đầu tiên của mảng để làm giá trị khởi tạo
- khi đó current value [(function (total, course)]
- ở đây là course sẽ là giá trị thứ 2
- -> bị giảm đi 1 lần chạy, 1 lần gọi lại của function
var i = 0;
var totalCoins = courses.reduce(function (total, course) {
  i++;

  //console.log(i, total, course);

  return total + course.coin;
}); - initial value -> không bắt buộc - tuy nhiên ảnh hưởng đến việc reduce chạy thế nào
//console.log(totalCoins);

- inital value
- khi đặt initial value: mong muốn nhận kiểu dữ liệU là gì -> đặt initial value là kiểu dữ liệu đó
- nhưng trong trường hợp không đăt initial value
- mà kiểu dữ liệu vẫn là kiểu dữ liệu mà bạn mong muốn
- -> không cần phải đặt
- nếu không sử dụng initial value
- -> nó sẽ lấy giá trị đầu tiên làm khởi tạo
var numbers = [250, 200, 150, 0, 0, 0];

var tottalNumbers = numbers.reduce(function (total, number) {
  return total + number;
}); - initial value
console.log(tottalNumbers);

- bài tập
- bt1 - Flat - "làm phẳng" mảng từ Depth array - "Mảng sâu"
var depthArray = [1, 2, [3, 4], 5, 6, [7, 8, 9]];

- xử lý
var flatArray = depthArray.reduce(function (flatOutput, depthItem) {
  return flatOutput.concat(depthItem);
}, []);
console.log(flatArray);

- bt2 - Lấy ra các khóa học đưa vào 1 mảng mới
- lấy các khóa học từ các topics ra thành 1 mảng mới
var topics = [
  {
    topic: "Front-end",
    courses: [
      {
        id: 1,
        title: "HTML, CSS",
      },
      {
        id: 2,
        title: "JavaScript",
      },
    ],
  },
  {
    topic: "Back-end",
    courses: [
      {
        id: 1,
        title: "NodeJs",
      },
      {
        id: 2,
        title: ".NET FW",
      },
    ],
  },
];

console.log(topics);

var newCourses = topics.reduce(function (course, topic) {
  return course.concat(topic.courses);
}, []);
console.log(newCourses);

var htmls = newCourses.map(function (course) {
  return `
        <div>
            <h2>title: ${course.title}</h2>
            <p>id: ${course.id}</p>
        </div>
    `;
});
console.log(htmls.join(""));
//document.write(htmls.join(""));
